{"paragraphs":[{"text":"%sh echo 'export SPARK_SUBMIT_OPTIONS=\"--packages com.spotify:spark-bigquery_2.11:0.2.1\"' >> /usr/lib/zeppelin/conf/zeppelin-env.sh","dateUpdated":"2017-12-06T15:02:49+0000","config":{"editorSetting":{"language":"sh","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/sh","results":[],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1512572559588_-2090071846","id":"20171127-011846_2147086289","result":{"code":"SUCCESS","type":"TEXT","msg":""},"dateCreated":"2017-12-06T15:02:39+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:236","dateFinished":"2017-12-06T15:02:50+0000","dateStarted":"2017-12-06T15:02:49+0000","focus":true},{"text":"%sh cat /usr/lib/zeppelin/conf/zeppelin-env.sh\n## %sh sed -i '/export SPARK_SUBMIT_OPTIONS/d' /usr/lib/zeppelin/conf/zeppelin-env.sh\n","dateUpdated":"2017-12-06T15:02:39+0000","config":{"editorSetting":{"language":"sh","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/sh","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1512572559589_-2090456595","id":"20171127-012752_793755383","dateCreated":"2017-12-06T15:02:39+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:237"},{"text":"import org.apache.commons.io.IOUtils\nimport java.net.URL\nimport java.nio.charset.Charset\n\nimport com.google.cloud.hadoop.io.bigquery.BigQueryConfiguration\nimport com.google.cloud.hadoop.io.bigquery.BigQueryFileFormat\nimport com.google.cloud.hadoop.io.bigquery.GsonBigQueryInputFormat\nimport com.google.cloud.hadoop.io.bigquery.output.BigQueryOutputConfiguration\nimport com.google.cloud.hadoop.io.bigquery.output.IndirectBigQueryOutputFormat\nimport com.google.gson.JsonObject\nimport org.apache.hadoop.io.LongWritable\nimport org.apache.hadoop.mapreduce.lib.output.TextOutputFormat\n\nimport com.spotify.spark.bigquery._\n\n@transient\nval conf = sc.hadoopConfiguration\n\n// Input parameters.\nval projectId = conf.get(\"fs.gs.project.id\")\nval bucket = conf.get(\"fs.gs.system.bucket\")\n","dateUpdated":"2017-12-06T15:02:55+0000","config":{"editorSetting":{"language":"scala"},"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1512572559589_-2090456595","id":"20170927-202627_970177482","result":{"code":"SUCCESS","type":"TEXT","msg":"\nimport org.apache.commons.io.IOUtils\n\nimport java.net.URL\n\nimport java.nio.charset.Charset\n\nimport com.google.cloud.hadoop.io.bigquery.BigQueryConfiguration\n\nimport com.google.cloud.hadoop.io.bigquery.BigQueryFileFormat\n\nimport com.google.cloud.hadoop.io.bigquery.GsonBigQueryInputFormat\n\nimport com.google.cloud.hadoop.io.bigquery.output.BigQueryOutputConfiguration\n\nimport com.google.cloud.hadoop.io.bigquery.output.IndirectBigQueryOutputFormat\n\nimport com.google.gson.JsonObject\n\nimport org.apache.hadoop.io.LongWritable\n\nimport org.apache.hadoop.mapreduce.lib.output.TextOutputFormat\n\nimport com.spotify.spark.bigquery._\n\nconf: org.apache.hadoop.conf.Configuration = Configuration: core-default.xml, core-site.xml, mapred-default.xml, mapred-site.xml, yarn-default.xml, yarn-site.xml, hdfs-default.xml, hdfs-site.xml, file:/etc/hive/conf.dist/hive-site.xml\n\nprojectId: String = mortgage-data-warehouse\n\nbucket: String = dataproc-8adad88a-330a-4cbd-9a69-57e1d2afdebd-us\n"},"dateCreated":"2017-12-06T15:02:39+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:238","dateFinished":"2017-12-06T15:03:33+0000","dateStarted":"2017-12-06T15:02:56+0000","focus":true},{"text":"\r\nval fullyQualifiedInputTableId = \"mortgage-data-warehouse:FHLMC.FHLMC_copy_rev3_47m\" //\"mortgage-data-warehouse:GNMAI.GNMAI_H\"  \r\n\r\n// Input configuration.\r\nconf.set(BigQueryConfiguration.PROJECT_ID_KEY, projectId)\r\nconf.set(BigQueryConfiguration.GCS_BUCKET_KEY, bucket)\r\nBigQueryConfiguration.configureBigQueryInput(conf, fullyQualifiedInputTableId)\r\n\r\n// Load data from BigQuery.\r\nval tableData = sc.newAPIHadoopRDD(\r\n    conf,\r\n    classOf[GsonBigQueryInputFormat],\r\n    classOf[LongWritable],\r\n    classOf[JsonObject]).cache\r\n\r\nval fileData = sc.textFile(\"gs://\" + projectId + \"/FHLMC/FHLMC_all_46m/fhlmc46m_*.csv\")\r\n\r\n// Output parameters.\r\nval outputTableId = projectId + \":FHLMC.test_output\"\r\n// Temp output bucket that is deleted upon completion of job.\r\nval outputGcsPath = (\"gs://\" + bucket + \"/hadoop/tmp/bigquery/testoutput\")\r\n\r\n// Output configuration.\r\n// Let BigQueery auto-detect output schema (set to null below).\r\nBigQueryOutputConfiguration.configure(conf,\r\n                                      outputTableId,\r\n                                      null,\r\n                                      outputGcsPath,\r\n                                      BigQueryFileFormat.NEWLINE_DELIMITED_JSON,\r\n                                      classOf[TextOutputFormat[_,_]])\r\n\r\nconf.set(\"mapreduce.job.outputformat.class\",\r\n         classOf[IndirectBigQueryOutputFormat[_,_]].getName)\r\n\r\n// Truncate the table before writing output to allow multiple runs.\r\nconf.set(BigQueryConfiguration.OUTPUT_TABLE_WRITE_DISPOSITION_KEY,\r\n         \"WRITE_TRUNCATE\")\r\n\r\n// Helper to convert JsonObjects to (loan, age) tuples.\r\ndef convertToTuple(record: JsonObject) : (String, Option[Long]) = {\r\n  val loan = record.get(\"Loan_Num_Q\").getAsString //.toLowerCase\r\n  val rate = if (record.has(\"Age_Q\")) Some(record.get(\"Age_Q\").getAsLong) else None\r\n  return (loan, rate)\r\n}\r\n\r\n// Helper to convert (word, count) tuples to JsonObjects.\r\n//import com.google.gson.JsonNull\r\ndef convertToJson(pair: (String, Option[Long])) : JsonObject = {\r\n  val loan = pair._1\r\n  val count = pair._2\r\n  val jsonObject = new JsonObject()\r\n  jsonObject.addProperty(\"loan_num\", loan)\r\n//  if(count != None) jsonObject.addProperty(\"noterate_count\", count.get) else jsonObject.add(\"noterate_count\", JsonNull.INSTANCE)\r\n  count.foreach(jsonObject.addProperty(\"noterate_count\", _))\r\n  return jsonObject\r\n}\r\n\r\n\r\nval loanCounts = tableData\r\n        .map(entry => convertToTuple(entry._2))\r\n        .repartition(30)\r\n//        .groupByKey()\r\n//        .reduceByKey(_ + _)\r\n//      .map(entry => {\r\n//            val loan = entry._2.get(\"Loan_Num_Q\").getAsString.toLowerCase\r\n//            val age  = entry._2.get(\"Age_Q\").getAsLong\r\n//            (loan, age)\r\n//          (entry._2.get(\"Loan_Num_Q\").getAsString, entry._2.get(\"Age_Q\").getAsLong)\r\n//      })\r\n//      .map(entry => entry._2.getClass)\r\n\r\n//print(tableDatatext.getClass)\r\n\r\n\r\n//loanCounts.partitions.size    \r\nloanCounts.keys.take(20) //.foreach(l => println(l))      \r\nloanCounts.values.take(20) //.foreach(l => println(l))      \r\n      \r\n\r\n//    ----------------------- Test functionality -------------------------------\r\n//val x = sc.parallelize(Array((\"1501052587\",4500L), (\"1501052581\",4500L), (\"1023599344\",13000L)))\r\n//println(x.collect().mkString(\", \"))\r\n//    (x.map(pair => (null, convertToJson(pair)))\r\n//    .saveAsNewAPIHadoopDataset(conf))\r\n\r\n\r\n\r\n\r\n// Write data back into a new BigQuery table.\r\n// IndirectBigQueryOutputFormat discards keys, so set key to null.\r\n\r\n/*\r\n(loanCounts\r\n    .map(pair => (null, convertToJson(pair)))\r\n    .saveAsNewAPIHadoopDataset(conf))\r\n*/\r\n\r\n","dateUpdated":"2017-12-06T15:02:39+0000","config":{"editorSetting":{"language":"scala"},"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1512572559590_-2089302349","id":"20170927-202629_634302269","result":{"code":"ERROR","type":"TEXT","msg":"\nfullyQualifiedInputTableId: String = mortgage-data-warehouse:FHLMC.FHLMC_copy_rev3_47m\n\n\n\n<console>:26: error: not found: value conf\n       conf.set(BigQueryConfiguration.PROJECT_ID_KEY, projectId)\n       ^\n\n\n\n<console>:26: error: not found: value BigQueryConfiguration\n       conf.set(BigQueryConfiguration.PROJECT_ID_KEY, projectId)\n                ^\n\n\n\n<console>:26: error: not found: value projectId\n       conf.set(BigQueryConfiguration.PROJECT_ID_KEY, projectId)\n                                                      ^\n"},"dateCreated":"2017-12-06T15:02:39+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:239"},{"text":"//tableData.take(10).foreach(entry => print(entry.getClass))\n//print(tableData.getClass)\n//print(fileData.getClass)\n\nval fredmd = spark.read.option(\"header\", \"true\").csv(\"gs://\" + projectId + \"/reference/FRED-MD/*.csv\") \nval fileData = sc.textFile(\"gs://\" + projectId + \"/reference/FRED-MD/*.csv\") // \"/FHLMC/FHLMC_all_46m/fhlmc46m_*.csv\"\n\nprint(fileData.getClass)\nprint(fredmd.getClass)\n\n//fileData.toDF.printSchema\n//fredmd.printSchema\n\n\n//fileData.toDF.show\n//fredmd.show\n\n\n\n//filetest.select(\"Loan_num_q\").write.csv(\"gs://\" + projectId + \"/FHLMC\n\n/*\nval test = spark.read.json(test0).cache\ntest.printSchema\n*/\n","dateUpdated":"2017-12-06T15:02:39+0000","config":{"editorSetting":{"language":"scala"},"colWidth":12,"editorMode":"ace/mode/scala","results":[],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1512572559590_-2089302349","id":"20170927-203538_9528790","dateCreated":"2017-12-06T15:02:39+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:240"},{"text":"val rdd = sc.parallelize(\n      List( (2012,\"Tesla\",\"S\"), (1997,\"Ford\",\"E350\"), (2015,\"Chevy\",\"Volt\"))\n  )\n//  val sqlContext = new SQLContext(sc)\n\n  // this is used to implicitly convert an RDD to a DataFrame.\n  //import spark.implicits._\n  import org.apache.spark.sql.types._\n  import org.apache.spark.sql._\n\n  val dataframe = rdd.toDF()\n\n  dataframe.show\n  dataframe.map(row => row.getAs[Int](\"_1\")).show \n  \n dataframe.map(row => {\n    val row1 = row.getAs[String](1)\n    val make = if (row1.toLowerCase == \"tesla\") \"S\" else row1\n    Row(row(0),make,row(2))\n  }).collect().foreach(println)","dateUpdated":"2017-12-06T15:02:39+0000","config":{"editorSetting":{"language":"scala"},"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1512572559590_-2089302349","id":"20171201-202415_64877029","dateCreated":"2017-12-06T15:02:39+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:241"},{"text":"//val data = sc.wholeTextFiles(\"HDFS_PATH\")\nval fileData2 = sc.wholeTextFiles(\"gs://\" + projectId + \"/reference/FRED-MD/*.csv\") \n\nimport spark.implicits._\nimport org.apache.spark.sql.types._\nimport org.apache.spark.sql._\n\nimport com.google.gson.JsonObject\nimport com.google.gson.JsonParser\n\n//val files = fileData2.map { case(filename, content) => filename}.filter(filename => filename.matches(\".*-[0-9]{2}.csv$\"))\n//val files = fileData2.filter{ case(filename, content) => filename.matches(\".*-[0-9]{2}.csv$\")}\n val files = fileData2.filter{ case(filename, content) => filename.matches(\".*2015-(09|10|11|12).csv$\")}   //(07|08|09).csv$\n                     .map   { case(filename, content) => \n                                   //val name = filename.split(\"/FRED-MD/\")(1).split(\".csv\")(0) + \"-01\" \n                                   (filename, content)\n                                   //val result = content.lines.toList.zipWithIndex.map{ case (line, index) => if (index == 0) (\"vintage,\" + line).split(\",\") else  (name + \",\" + line).split(\",\")  }\n                                   //(result(0), result(1), result.drop(2))\n                                   //result(2)\n                     }\n                     \ndef csvTobq(filename: String, data: String) = { \n\n println (filename)\n \n // your logic of processing a single file comes here\n val name = filename.split(\"/FRED-MD/\")(1).split(\".csv\")(0) + \"-01\" \n \n val result = data.lines.toList.zipWithIndex.map{ case (line, index) => if (index == 0) (\"vintage,\" + line).split(\",\") else  (name + \",\" + line).split(\",\")  }\n //val scData = sc.textFile(filename)\n //val scTable = scData.map(_.split(\",\")).toDF\n\n \n //result(0).foreach(println)\n //result.drop(2).map(x => Row.fromSeq(x)).foreach(println)\n\n val datardd1 = sc.parallelize(result) \n val datardd2 = sc.parallelize(result.take(2).drop(1)).map(x => Row.fromSeq(x)) \n val schemasize = datardd2.first().size\n val datardd3 = sc.parallelize(result.drop(2)).map(x => Row.fromSeq( x ++ (\",\" * (schemasize - x.size)).split(\",\", -1)  )) //43   \n\n\n val headrdd = datardd1.first().map(x => x.replace(\" \", \"_\").replace(\"&\", \"and\").replace(\":\",\"\"))\n// println(datardd3.first)\n \n val df_schema =\n  StructType(\n    headrdd.map(fieldName => StructField(fieldName, StringType, true))\n  )\n    \n\n val tabledf2 = sqlContext.createDataFrame(datardd2, df_schema)\n val tabledf3 = sqlContext.createDataFrame(datardd3, df_schema).where($\"sasdate\" =!= \"\")   //filter(\"sasdate != '' \")  //.select(\"sasdate\") //.where(col(\"sasdate\").contains(\"/1/1988\"))\n \n //tabledf3.take(710).foreach(println) \n println(tabledf3.count)\n \n  val date_conform = udf((date: String) => {\n     val datepart = date.split(\"/\")\n     java.sql.Date.valueOf(Array(datepart(2),datepart(0),datepart(1)).mkString(\"-\")) \n  }) \n   //tabledf3_1.map(row => row.getAs[String](\"sasdate\"))\n\n   val tabledf2_1 = tabledf2.select(\n          tabledf2.columns.map {\n            case \"vintage\" => tabledf2(\"vintage\").cast(DateType).as(\"vintage\")\n            case \"sasdate\" => lit(\"tcode\").as(\"Transform\")\n            case other     => tabledf2(other).cast(IntegerType).as(other)\n          }: _*\n   )\n   \n   tabledf2_1.take(1).foreach(println)\n\n //val tabledf3_1 = tabledf3.withColumn(\"sasdate\", lit(\"ch2018/3/3\")) \n //val tabledf3_2 = tabledf3.withColumn(\"sasdate1\", date_conform(trim($\"sasdate\"))) \n //tabledf3_2.select(\"sasdate\",\"sasdate1\").take(350).foreach(println)\n \n println(\"--------------------------check----------------------------------------------------\")\n\n   val tabledf3_1 = tabledf3.select(\n          tabledf3.columns.map {\n            case \"vintage\" => tabledf3(\"vintage\").cast(DateType).as(\"vintage\")\n            case \"sasdate\" => date_conform(trim($\"sasdate\")).as(\"sasdate\")\n            //case \"sasdate\" => tabledf3(\"sasdate\")\n            case other     => tabledf3(other).cast(DoubleType).as(other)\n          }: _*\n   )  //.filter(col(\"sasdate\") < lit(\"2017-01-01\"))\n   \n  //tabledf2.printSchema\n  //print(datardd1.toDF.count)\n  \n  println(tabledf3_1.count)\n  //tabledf3_1.take(700).foreach(println)\n  \n  //val tablerdd: org.apache.spark.rdd.RDD[Row] = tabledf2.rdd\n \n\n  tabledf2.select(\"sasdate\").take(5).foreach(println)\n  tabledf3.select(\"sasdate\").take(5).foreach(println)\n  println(\"the Data class is : %s\".format(tabledf3.select(\"sasdate\")) )\n \n\n  //------------------------- outputing  data of each table -------------------------------------------------------------- \n  import com.google.api.services.bigquery.model.TableSchema\n  import com.google.api.services.bigquery.model.TableFieldSchema\n  import scala.collection.JavaConverters._ \n  \n  val bq_schema_data = headrdd.toList.map(fieldName => fieldName match {\n      case \"vintage\"|\"sasdate\" => new TableFieldSchema().setName(fieldName).setType(\"DATE\").setMode(\"NULLABLE\")\n      case _                   => new TableFieldSchema().setName(fieldName).setType(\"FLOAT\").setMode(\"NULLABLE\")\n      }\n  ).asJava //\n      \n  val bq_outputschema_data = new TableSchema().setFields(bq_schema_data)\n   //println(bq_schema_data)\n\n  val outputTableId = projectId + \":CR_MACRO.FREDMDdata\" + name.replace(\"-\", \"\")\n  // Temp output bucket that is deleted upon completion of job.\n  val outputGcsPath = (\"gs://\" + bucket + \"/hadoop/tmp/bigquery/testoutput/\" + name)\n\n  // Output configuration.\n  // Let BigQueery auto-detect output schema (set to null below).\n  BigQueryOutputConfiguration.configure(conf,\n                                      outputTableId,\n                                      bq_outputschema_data, //null,   \n                                      outputGcsPath,\n                                      BigQueryFileFormat.NEWLINE_DELIMITED_JSON,\n                                      classOf[TextOutputFormat[_,_]])\n\n  conf.set(\"mapreduce.job.outputformat.class\",\n         classOf[IndirectBigQueryOutputFormat[_,_]].getName)\n\n  // Truncate the table before writing output to allow multiple runs.\n  conf.set(BigQueryConfiguration.OUTPUT_TABLE_WRITE_DISPOSITION_KEY,\n         \"WRITE_TRUNCATE\")\n\n\n  // save rdd of single file processed data to hdfs comes here\n  //tabledf3_1.printSchema\n  tabledf3_1.toJSON.rdd.map(pair => (null, new JsonParser().parse(pair).getAsJsonObject)).saveAsNewAPIHadoopDataset(conf)\n  \n  //------------------------- outputing  tcode of each table --------------------------------------------------------------\n  val bq_schema_code = tabledf2_1.columns.toList.map(fieldName => fieldName match {\n      case \"vintage\"   => new TableFieldSchema().setName(fieldName).setType(\"DATE\").setMode(\"NULLABLE\")\n      case \"Transform\" => new TableFieldSchema().setName(fieldName).setType(\"STRING\").setMode(\"NULLABLE\")\n      case _           => new TableFieldSchema().setName(fieldName).setType(\"INTEGER\").setMode(\"NULLABLE\")\n      }\n  ).asJava //\n      \n  val bq_outputschema_code = new TableSchema().setFields(bq_schema_code)\n  //println(bq_schema_code)\n  \n  val outputTableId_code = projectId + \":CR_MACRO.FREDMDtcode\" + name.replace(\"-\", \"\")\n  // Temp output bucket that is deleted upon completion of job.\n  val outputGcsPath_code = (\"gs://\" + bucket + \"/hadoop/tmp/bigquery/testoutput/tcode\" + name)\n\n  // Output configuration.\n  // Let BigQueery auto-detect output schema (set to null below).\n  BigQueryOutputConfiguration.configure(conf,\n                                      outputTableId_code,\n                                      bq_outputschema_code, //null,   \n                                      outputGcsPath_code,\n                                      BigQueryFileFormat.NEWLINE_DELIMITED_JSON,\n                                      classOf[TextOutputFormat[_,_]])\n\n  conf.set(\"mapreduce.job.outputformat.class\",\n         classOf[IndirectBigQueryOutputFormat[_,_]].getName)\n\n  // Truncate the table before writing output to allow multiple runs.\n  conf.set(BigQueryConfiguration.OUTPUT_TABLE_WRITE_DISPOSITION_KEY,\n         \"WRITE_TRUNCATE\")\n\n\n  // save rdd of single file processed data to hdfs comes here\n  //tabledf2_1.printSchema\n  tabledf2_1.toJSON.rdd.map(pair => (null, new JsonParser().parse(pair).getAsJsonObject)).saveAsNewAPIHadoopDataset(conf)\n\n  \n  \n}\n\nprintln(files.count) \nfiles.collect.foreach{ case (filename, content) => {\n    csvTobq(filename, content)\n}}\n\n\n//val filedata = files.map{case (result1, result2, result3) => result3 }\n                \n//filedata.collect.foreach( x => println(x.size)) \n  \n\n","dateUpdated":"2017-12-06T15:50:53+0000","config":{"editorSetting":{"language":"scala"},"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1512572559590_-2089302349","id":"20171109-165314_1401698027","result":{"code":"SUCCESS","type":"TEXT","msg":"\nfileData2: org.apache.spark.rdd.RDD[(String, String)] = gs://mortgage-data-warehouse/reference/FRED-MD/*.csv MapPartitionsRDD[1231] at wholeTextFiles at <console>:134\n\nimport spark.implicits._\n\nimport org.apache.spark.sql.types._\n\nimport org.apache.spark.sql._\n\nimport com.google.gson.JsonObject\n\nimport com.google.gson.JsonParser\n\nfiles: org.apache.spark.rdd.RDD[(String, String)] = MapPartitionsRDD[1233] at map at <console>:147\n\ncsvTobq: (filename: String, data: String)Unit\n4\ngs://mortgage-data-warehouse/reference/FRED-MD/2015-09.csv\n680\n[2015-09-01,tcode,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,1,2,2,2,5,5,2,2,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,1,2,1,1,4,4,4,4,4,4,4,4,4,4,1,1,1,1,5,5,5,5,5,2,6,6,5,6,6,7,6,6,6,2,5,5,2,5,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,5,5,5,5,5,6,6,6,6,6,6,1,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,2,6,6,6,6,1]\n--------------------------check----------------------------------------------------\n680\n[Transform:]\n[1/1/1959]\n[2/1/1959]\n[3/1/1959]\n[4/1/1959]\n[5/1/1959]\nthe Data class is : [sasdate: string]\ngs://mortgage-data-warehouse/reference/FRED-MD/2015-10.csv\n681\n[2015-10-01,tcode,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,1,2,2,2,5,5,2,2,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,1,2,1,1,4,4,4,4,4,4,4,4,4,4,1,1,1,1,5,5,5,5,5,2,6,6,5,6,6,7,6,6,6,2,5,5,2,5,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,5,5,5,5,5,6,6,6,6,6,6,1,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,2,6,6,6,6,1]\n--------------------------check----------------------------------------------------\n681\n[Transform:]\n[1/1/1959]\n[2/1/1959]\n[3/1/1959]\n[4/1/1959]\n[5/1/1959]\nthe Data class is : [sasdate: string]\ngs://mortgage-data-warehouse/reference/FRED-MD/2015-11.csv\n682\n[2015-11-01,tcode,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,1,2,2,2,5,5,2,2,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,1,2,1,1,4,4,4,4,4,4,4,4,4,4,1,1,1,1,5,5,5,5,5,2,6,6,5,6,6,7,6,6,6,2,5,5,2,5,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,5,5,5,5,5,6,6,6,6,6,6,1,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,2,6,6,6,6,1]\n--------------------------check----------------------------------------------------\n682\n[Transform:]\n[1/1/1959]\n[2/1/1959]\n[3/1/1959]\n[4/1/1959]\n[5/1/1959]\nthe Data class is : [sasdate: string]\ngs://mortgage-data-warehouse/reference/FRED-MD/2015-12.csv\n683\n[2015-12-01,tcode,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,1,2,2,2,5,5,2,2,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,1,2,1,1,4,4,4,4,4,4,4,4,4,4,1,1,1,1,5,5,5,5,5,2,6,6,5,6,6,7,6,6,6,2,5,5,2,5,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,5,5,5,5,5,6,6,6,6,6,6,1,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,2,6,6,6,6,1]\n--------------------------check----------------------------------------------------\n683\n[Transform:]\n[1/1/1959]\n[2/1/1959]\n[3/1/1959]\n[4/1/1959]\n[5/1/1959]\nthe Data class is : [sasdate: string]\n"},"dateCreated":"2017-12-06T15:02:39+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:242","dateFinished":"2017-12-06T15:53:49+0000","dateStarted":"2017-12-06T15:50:53+0000","focus":true},{"text":"  val date_conform = udf((date: String) => {\n     val datepart = date.split(\"/\")     \n     java.sql.Date.valueOf(Array(datepart(2),datepart(0),datepart(1)).mkString(\"-\")) \n  }) \n\nval diamonds = sqlContext.read.format(\"csv\")\n  .option(\"header\", \"true\")\n  .option(\"inferSchema\", \"true\")\n  .load(\"gs://\" + projectId + \"/reference/FRED-MD/2017-03.csv\")\n  \n  \n  //val dia = diamonds.withColumn(\"sasdate\", date_conform($\"sasdate\"))  \n  val dia1 = diamonds //.filter(\"sasdate is not null\")\n  dia1.show\n  dia1.count\n  \n  \n  \n  ","dateUpdated":"2017-12-06T15:02:39+0000","config":{"editorSetting":{"language":"scala"},"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1512572559600_-2082376868","id":"20171205-174810_1560006234","result":{"code":"SUCCESS","type":"TEXT","msg":"\ndate_conform: org.apache.spark.sql.expressions.UserDefinedFunction = UserDefinedFunction(<function1>,DateType,Some(List(StringType)))\n\ndiamonds: org.apache.spark.sql.DataFrame = [sasdate: string, RPI: double ... 127 more fields]\n\ndia1: org.apache.spark.sql.DataFrame = [sasdate: string, RPI: double ... 127 more fields]\nn|   sasdate|   RPI|W875RX1|DPCERA3M086SBEA|  CMRMTSPLx|    RETAILx| INDPRO|IPFPNSS|IPFINAL|IPCONGD|IPDCONGD|IPNCONGD|IPBUSEQ|  IPMAT| IPDMAT| IPNMAT|IPMANSICS|IPB51222S|IPFUELS| CUMFNS| HWI|  HWIURATIO|CLF16OV|CE16OV|UNRATE|UEMPMEAN|UEMPLT5|UEMP5TO14|UEMP15OV|UEMP15T26|UEMP27OV|    CLAIMSx|PAYEMS|USGOOD|CES1021000001|USCONS|MANEMP|DMANEMP|NDMANEMP|SRVPRD|USTPU|USWTRADE|USTRADE|USFIRE|USGOVT|CES0600000007|AWOTMAN|AWHMAN|HOUST|HOUSTNE|HOUSTMW|HOUSTS|HOUSTW|PERMIT|PERMITNE|PERMITMW|PERMITS|PERMITW|ACOGNO|    AMDMNOx|ANDENOx|    AMDMUOx|    BUSINVx|   ISRATIOx| M1SL| M2SL|M2REAL| AMBSL|TOTRESNS|NONBORRES|BUSLOANS| REALLN|NONREVSL|     CONSPI|S&P 500|S&P: indust|S&P div yield|S&P PE ratio|FEDFUNDS|CP3Mx|TB3MS|TB6MS| GS1| GS5|GS10| AAA| BAA|COMPAPFFx|TB3SMFFM|TB6SMFFM|T1YFFM|T5YFFM|T10YFFM|AAAFFM|BAAFFM|TWEXMMTH|EXSZUSx| EXJPUSx|EXUSUKx|EXCAUSx|WPSFD49207|WPSFD49502|WPSID61|WPSID62|OILPRICEx|PPICMM|CPIAUCSL|CPIAPPSL|CPITRNSL|CPIMEDSL|CUSR0000SAC|CUUR0000SAD|CUSR0000SAS|CPIULFSL|CUUR0000SA0L2|CUSR0000SA0L5| PCEPI|DDURRG3M086SBEA|DNDGRG3M086SBEA|DSERRG3M086SBEA|CES0600000008|CES2000000008|CES3000000008|UMCSENTx|MZMSL|DTCOLNVHFNM|DTCTHFNM| INVEST|VXOCLSx|\nn|Transform:|   5.0|    5.0|            5.0|        5.0|        5.0|    5.0|    5.0|    5.0|    5.0|     5.0|     5.0|    5.0|    5.0|    5.0|    5.0|      5.0|      5.0|    5.0|    2.0| 2.0|        2.0|      5|     5|   2.0|     2.0|      5|        5|       5|        5|       5|        5.0|     5|     5|          5.0|     5|     5|      5|       5|     5|    5|     5.0|    5.0|     5|     5|          1.0|    2.0|   1.0|    4|      4|      4|     4|     4|     4|       4|       4|      4|      4|     5|        5.0|    5.0|        5.0|        5.0|        2.0|  6.0|  6.0|   5.0|   6.0|     6.0|        7|     6.0|    6.0|     6.0|        2.0|    5.0|        5.0|          2.0|         5.0|     2.0|  2.0|  2.0|  2.0| 2.0| 2.0| 2.0| 2.0| 2.0|      1.0|     1.0|     1.0|   1.0|   1.0|    1.0|   1.0|   1.0|     5.0|    5.0|     5.0|    5.0|    5.0|       6.0|       6.0|    6.0|    6.0|      6.0|   6.0|     6.0|     6.0|     6.0|     6.0|        6.0|        6.0|        6.0|     6.0|          6.0|          6.0|   6.0|            6.0|            6.0|            6.0|          6.0|          6.0|          6.0|     2.0|  6.0|        6.0|     6.0|    6.0|    1.0|\n|  1/1/1959|2289.8| 2151.8|         18.191| 255861.885|18234.44037|22.7253|23.6124|22.3645|32.4403| 22.0541| 37.7421| 8.1949|21.2503|12.6648|30.5361|  21.2612|  20.2974|38.3447|80.1973|32.0|0.007866273|  67936| 63868|   6.0|    16.3|   1574|     1169|    1396|      594|     802|291077.8673| 52480| 18796|        713.0|  2993| 14998|   8740|    6258| 33684|10790|  2588.2| 5349.0|  2418|  8105|         39.8|    2.5|  40.2| 1657|    350|    452|   505|   350|  null|    null|    null|   null|   null|  null|14716.48296|   null|42620.34624|84888.40373|       1.56|138.9|286.6| 987.9|38.756|  18.889|    18338|  35.213|24.9242| 48.9612|0.124869166|  55.62|       59.3|  3.158342323| 18.44574135|    2.48|  3.3| 2.82| 3.09|3.36|4.01|4.02|4.12|4.87|     0.82|    0.34|    0.61|  0.88|  1.53|   1.54|  1.64|  2.39|    null| 4.3122|359.8417| 2.8065| 0.9671|      33.1|      33.4|   30.6|   31.6|      3.0|  32.5|   29.01|    44.8|    29.3|    21.1|       33.3|       38.2|       22.9|    28.9|         30.7|         29.6|17.124|         54.478|         19.874|         12.133|         2.13|         2.45|         2.04|    null|274.9|     6476.0| 12298.0|84.2043|   null|\n|  2/1/1959|2299.6| 2160.4|          18.38|257783.6485|18368.21974|23.1703|23.9311|22.5582|32.6782| 22.1699| 38.1029| 8.3046|21.9233|13.2482|31.0708|   21.652|  20.2421|37.8224|81.4428|34.0|0.008575032|  67649| 63684|   5.9|    15.5|   1554|     1164|    1277|      545|     732|282957.5957| 52687| 18890|        704.2|  2980| 15115|   8839|    6276| 33797|10830|  2594.5| 5379.8|  2420|  8116|         39.7|    2.6|  40.3| 1667|    346|    469|   508|   344|  null|    null|    null|   null|   null|  null|15400.24873|   null|43677.15151|85180.65208|1.539337748|139.4|287.7| 992.1|38.895|   18.57|    18065| 35.2201| 25.227| 49.5137|0.125637402|  54.77|      58.33|  3.219517984| 18.41811903|    2.43| 3.26|  2.7| 3.13|3.54|3.96|3.96|4.14|4.89|     0.83|    0.27|     0.7|  1.11|  1.53|   1.53|  1.71|  2.46|    null| 4.3133|359.8417| 2.8093| 0.9748|      33.2|      33.4|   30.7|   31.4|      3.0|  32.5|    29.0|    44.7|    29.4|    21.2|       33.3|       38.1|       23.0|    28.9|         30.6|         29.6|17.138|          54.51|         19.882|         12.149|         2.13|         2.46|         2.05|    null|276.0|     6476.0| 12298.0| 83.528|   null|\n|  3/1/1959|2314.4| 2176.2|         18.555|256866.3717|18521.70306|23.5041| 24.076|22.6689|32.6782|  22.604| 37.9225| 8.3943|22.4927|13.7701|31.5375|  21.9907|  20.3802|38.7799|82.4769|36.0|0.009471192|  68068| 64267|   5.6|    15.3|   1459|     1093|    1210|      530|     680|260345.4902| 53016| 19069|        704.1|  3013| 15259|   8965|    6294| 33947|10889|  2603.8| 5431.5|  2430|  8132|         40.0|    2.8|  40.4| 1620|    330|    413|   503|   374|  null|    null|    null|   null|   null|  null|15745.42348|   null|44781.64655| 85619.0246|1.529006623|139.7|289.2| 998.3|38.896|  18.431|    17832| 35.1304|25.4218| 50.0077|0.125995717|  56.16|      59.79|  3.151709402| 18.99935148|     2.8| 3.35|  2.8| 3.13|3.61|3.99|3.99|4.13|4.85|     0.55|     0.0|    0.33|  0.81|  1.19|   1.19|  1.33|  2.05|    null| 4.3228|359.8417| 2.8127| 0.9698|      33.2|      33.3|   30.7|   31.5|     2.97|  32.9|   28.97|    44.7|    29.6|    21.3|       33.2|       38.2|       23.0|    28.9|         30.6|         29.6|17.149|         54.578|         19.868|         12.169|         2.15|         2.45|         2.07|    null|277.4|     6508.0| 12349.0|81.6405|   null|\n|  4/1/1959|2328.5| 2190.7|         18.488|262043.8285|18533.11061|24.0048|24.4237|23.0011|33.1937| 22.7487| 38.5538| 8.6137|23.1139|14.1846|32.5143|  22.4597|  20.4631|38.6058|83.9922|38.0|0.010641277|  68339| 64768|   5.2|    14.9|   1494|      934|    1039|      408|     631|246412.4884| 53320| 19269|        705.2|  3085| 15385|   9077|    6308| 34051|10920|  2614.6| 5393.7|  2439|  8142|         40.1|    2.9|  40.5| 1590|    275|    391|   536|   388|  null|    null|    null|   null|   null|  null|15919.42165|   null|45522.74556|86768.53477|1.529006623|139.7|290.1|1001.0|39.009|  18.678|    17986| 35.5581|25.7261| 50.4634|0.126126968|   57.1|      60.92|   3.11150613| 19.27297347|    2.96| 3.42| 2.95| 3.27|3.72|4.12|4.12|4.23|4.86|     0.46|   -0.01|    0.31|  0.76|  1.16|   1.16|  1.27|   1.9|    null| 4.3226|359.8417| 2.8165| 0.9636|      33.2|      33.4|   30.7|   31.7|     2.97|  32.7|   28.98|    44.8|    29.7|    21.3|       33.2|       38.2|       23.1|    29.0|         30.7|         29.6|17.183|         54.633|          19.88|         12.211|         2.16|         2.47|         2.08|    null|278.1|     6620.0| 12484.0|81.8099|   null|\n|  5/1/1959|2342.5| 2205.7|          18.71|263871.7173|18678.29753|24.3664|24.6265|23.2225|33.3524| 23.2118| 38.5538| 8.8928|23.7092|14.6758|32.8064|  22.7724|  20.7668|37.8659|84.9159|38.0|0.010922679|  68178| 64699|   5.1|    14.7|   1479|     1005|     965|      390|     575|246951.9237| 53549| 19378|        710.0|  3087| 15487|   9160|    6327| 34171|10965|  2626.7| 5454.8|  2447|  8153|         40.3|    2.9|  40.7| 1498|    260|    355|   487|   396|  null|    null|    null|   null|   null|  null| 15248.8233|   null|45384.44523|87265.35696|1.518675497|140.7|292.2|1006.2|39.089|  18.552|    17811| 36.3064|26.0187| 51.0072|0.126663025|  57.96|      62.09|  3.076828847| 19.49413505|     2.9| 3.56| 2.84| 3.33|3.96|4.35|4.31|4.37|4.96|     0.66|   -0.06|    0.43|  1.06|  1.45|   1.41|  1.47|  2.06|    null| 4.3228|359.8417| 2.8145|  0.963|      33.3|      33.3|   30.9|   31.5|     2.97|  32.9|   29.04|    44.9|    29.7|    21.4|       33.3|       38.3|       23.2|    29.1|         30.7|         29.6|17.191|         54.724|         19.858|          12.23|         2.17|         2.48|         2.08|    95.3|280.1|     6753.0| 12646.0|80.7315|   null|\n|  6/1/1959|2350.3| 2212.8|         18.779| 263840.032|18848.37364|24.3942|24.8003|23.3886|33.1938| 23.3855| 38.2833| 9.1022|23.5539|14.5684| 32.708|  22.7984|  20.8773|37.8659|84.7686|40.0|0.011665209|  68278| 64849|   5.0|    14.9|   1522|      963|     963|      415|     548|258257.7121| 53679| 19462|        715.0|  3100| 15554|   9209|    6345| 34217|10983|  2633.2| 5466.3|  2454|  8143|         40.2|    2.9|  40.6| 1503|    254|    343|   518|   388|  null|    null|    null|   null|   null|  null|15961.74553|   null|45731.62674|88142.10201|1.529006623|141.2|294.1|1010.3|39.062|  18.454|    17525| 37.1404|26.2668| 51.6754|0.127530602|  57.46|      61.75|  3.115210581| 19.10270492|    3.39| 3.83| 3.21| 3.52|4.07| 4.5|4.34|4.46|5.04|     0.44|   -0.18|    0.13|  0.68|  1.11|   0.95|  1.07|  1.65|    null| 4.3115|359.8417| 2.8125|  0.959|      33.2|      33.4|   30.9|   31.3|     2.97|  33.0|   29.11|    45.0|    29.8|    21.5|       33.3|       38.3|       23.2|    29.2|         30.8|         29.7| 17.24|         54.833|         19.903|         12.274|         2.18|          2.5|         2.09|    null|281.9|     6956.0| 12926.0|78.6972|   null|\n|  7/1/1959|2348.5| 2210.7|         18.716|267050.0459|18842.15134|23.8101|24.8293|23.5823|  33.63| 23.8485| 38.5989| 9.1221|22.1562|  13.11|32.8631|  22.3815|  21.1534|36.9954|82.9798|42.0|0.011904762|  68539| 65011|   5.1|    14.3|   1591|     1047|     889|      394|     495|263247.7868| 53803| 19529|        725.3|  3087| 15623|   9266|    6357| 34274|10993|  2638.9| 5470.0|  2460|  8173|         39.8|    2.8|  40.3| 1547|    271|    371|   533|   372|  null|    null|    null|   null|   null|  null|14743.75835|   null|45367.27691|88824.01482|       1.56|141.7|295.2|1012.7|39.137|  18.683|    17721| 37.6645|26.4697| 52.3569|0.129053241|  59.74|      64.23|  3.007482424| 19.54911187|    3.47| 3.98|  3.2| 3.82|4.39|4.58| 4.4|4.47|5.08|     0.51|   -0.27|    0.35|  0.92|  1.11|   0.93|   1.0|  1.61|    null| 4.3096|359.8417| 2.8117| 0.9573|      33.1|      33.3|   30.8|   31.0|     2.97|  32.7|   29.15|    45.1|    29.9|    21.5|       33.3|       38.4|       23.3|    29.2|         31.0|         29.8|17.275|          54.86|         19.923|         12.317|         2.18|         2.51|         2.09|    null|283.1|     7132.0| 13199.0|78.9984|   null|\n|  8/1/1959|2335.8| 2198.2|         18.828|253345.0872|18962.44907|23.0034|24.6555| 23.527|33.6697| 23.1829| 39.0498| 9.0424|20.4738|11.5288| 32.742|  21.4957|  21.2915|37.6048|79.4676|40.0|0.011148272|  68432| 64844|   5.2|    13.7|   1607|     1113|     889|      407|     482|287143.2726| 53334| 19049|        667.0|  3085| 15202|   8826|    6376| 34285|11019|  2678.0| 5487.5|  2464|  8181|         40.0|    2.9|  40.4| 1430|    230|    350|   474|   376|  null|    null|    null|   null|   null|  null|14046.82514|   null|45353.92378|  88970.139|1.590993378|141.9|296.4|1015.8| 39.23|  18.591|    17601|  38.089|26.6349| 53.0385|0.131250928|   59.4|      63.74|  3.035909091| 19.18847519|     3.5| 3.97| 3.38| 3.87|4.42|4.57|4.43|4.43|5.09|     0.47|   -0.12|    0.37|  0.92|  1.07|   0.93|  0.93|  1.59|    null| 4.3144|359.8417| 2.8095| 0.9546|      33.0|      33.1|   30.8|   30.7|     2.97|  32.4|   29.18|    45.2|    29.9|    21.6|       33.3|       38.3|       23.4|    29.3|         30.9|         29.8|  17.3|         54.605|         19.962|         12.353|         2.17|         2.53|         2.07|    null|284.2|     7309.0| 13471.0|77.3045|   null|\n|  9/1/1959|2336.7| 2197.4|         19.017|257170.4257|18714.59426|22.9756|24.5396|23.4439|33.5507| 22.4883| 39.2753| 8.9726|20.4479|11.4828|32.7851|  21.4436|  21.7334|37.3437|79.0489|41.0|0.010860927|  68545| 64770|   5.5|    13.7|   1602|     1275|     895|      449|     446|273946.5591| 53429| 19052|        652.5|  3051| 15254|   8873|    6381| 34377|11007|  2659.7| 5483.0|  2470|  8239|         40.0|    2.8|  40.4| 1540|    242|    362|   560|   376|  null|    null|    null|   null|   null|  null|14429.62111|   null|46039.70265|88590.21615|1.580662252|141.0|296.7|1014.4|39.155|  18.622|    17696| 38.2605|26.7848| 53.6838|0.132454478|  57.05|      61.21|  3.172655565| 18.12575343|    3.76| 4.63| 4.04|  4.7| 5.0| 4.9|4.68|4.52|5.18|     0.87|    0.28|    0.94|  1.24|  1.14|   0.92|  0.76|  1.42|    null| 4.3251|360.1008| 2.8037| 0.9517|      33.4|      33.6|   30.8|   30.9|     2.97|  32.9|   29.25|    45.3|    30.0|    21.7|       33.5|       38.3|       23.5|    29.3|         31.0|         29.9|17.345|         54.698|         20.013|         12.389|         2.17|         2.54|         2.08|    null|284.3|     7393.0| 13657.0|76.8926|   null|\n| 10/1/1959|2340.8| 2201.2|         18.887|257574.1191|18851.48478|22.8087|24.4816|23.3332|33.3921| 23.0092| 38.7793| 8.9028|20.2409|11.2985|32.1734|  21.2612|  21.7886| 37.126|78.1537|40.0|0.010230179|  68821| 64911|   5.7|    12.9|   1750|     1292|     883|      436|     447|312318.9444| 53359| 18925|        655.6|  3016| 15158|   8803|    6355| 34434|11010|  2664.1| 5492.8|  2477|  8265|         39.6|    2.8|  40.1| 1355|    254|    305|   443|   353|  null|    null|    null|   null|   null|  null|  14702.375|   null|46639.63994|88872.72288|1.590993378|140.5|296.5|1010.2|39.108|  18.607|    17700| 38.4113|26.9735|  54.366|0.133577396|   57.0|      61.04|  3.187140351| 17.80774664|    3.98| 4.73| 4.05| 4.53| 4.8|4.72|4.53|4.57|5.28|     0.75|    0.07|    0.55|  0.82|  0.74|   0.55|  0.59|   1.3|    null| 4.3388|360.2305| 2.8063| 0.9478|      33.1|      33.2|   30.8|   30.7|     2.97|  33.2|   29.35|    45.3|    30.1|    21.7|       33.5|       38.6|       23.6|    29.4|         31.1|         29.9|17.387|         54.659|         20.062|          12.43|         2.17|         2.56|         2.07|    null|284.2|     7466.0| 13804.0|76.2235|   null|\n| 11/1/1959|2358.3| 2215.7|         18.879|248288.4397| 18354.7381|22.9478|24.2209|22.9457|32.6782| 20.1729| 39.3204| 8.7632|21.0432|12.0508|32.2278|  21.4175|  21.9267|38.5623|78.5051|40.0|0.009992506|  68533| 64530|   5.8|    13.1|   1745|     1205|     982|      505|     477|350762.4742| 53635| 19108|        686.0|  3025| 15300|   8922|    6378| 34527|11031|  2669.7| 5502.3|  2483|  8284|         39.5|    2.5|  39.9| 1416|    246|    326|   500|   344|  null|    null|    null|   null|   null|  null|13876.58909|   null| 46544.2604|88785.04838|1.590993378|140.4|297.1|1012.3|39.039|  18.621|    17763| 38.6978|27.1343| 54.7948|0.133548136|  57.23|      61.46|  3.185968897| 17.65735595|     4.0| 4.67| 4.15| 4.54|4.81|4.75|4.53|4.56|5.26|     0.67|    0.15|    0.54|  0.81|  0.75|   0.53|  0.56|  1.26|    null| 4.3403|360.2305| 2.8027| 0.9504|      33.0|      33.1|   30.9|   30.5|     2.97|  33.9|   29.35|    45.3|    30.1|    21.8|       33.5|       38.7|       23.6|    29.4|         31.1|         29.9|17.398|         54.703|         20.028|         12.463|         2.17|         2.57|         2.07|    93.8|285.4|     7448.0| 13889.0|75.8793|   null|\n| 12/1/1959|2380.9| 2239.6|         18.858|260928.1688|18269.70005|24.3664|24.9452|23.4993| 33.749| 22.7487| 39.4556| 8.8928|23.2951|14.2613|33.0279|  22.8766|  22.0095|  38.04|83.5682|40.0|0.010949904|  68994| 65341|   5.3|    13.1|   1657|     1122|     920|      453|     467| 271771.176| 54175| 19425|        694.5|  3058| 15573|   9189|    6384| 34750|11084|  2682.0| 5526.5|  2491|  8368|         40.0|    2.7|  40.3| 1601|    256|    395|   592|   358|  null|    null|    null|   null|   null|  null|15165.11607|   null|46134.12839|89749.46793|       1.56|139.9|297.8|1012.6| 39.07|  18.956|    18015| 39.2932|27.5059| 56.0107|0.135063178|  59.06|      63.56|  3.098543854| 18.00127287|    3.99| 4.88| 4.49| 4.85|5.14|5.01|4.69|4.58|5.28|     0.89|     0.5|    0.86|  1.15|  1.02|    0.7|  0.59|  1.29|    null|  4.324|360.2305| 2.7984| 0.9513|      33.0|      33.1|   30.9|   30.3|     2.97|  33.7|   29.41|    45.3|    30.1|    21.8|       33.5|       38.6|       23.7|    29.5|         31.1|         30.0|17.418|         54.728|         20.032|          12.49|          2.2|         2.56|         2.11|    null|286.4|     7389.0| 14058.0|76.1711|   null|\n|  1/1/1960|2391.2| 2252.5|          18.91|265405.9608|18762.29853|25.0061|25.5536|24.1913|34.8197| 25.2378|  39.636| 9.2218|23.9681|14.8293|33.5351|  23.5019|  21.8162|37.5613|85.5616|41.0|0.011341632|  68962| 65347|   5.2|    13.5|   1638|     1045|     915|      450|     465|276008.0655| 54274| 19491|        686.0|  3021| 15687|   9289|    6398| 34783|11111|  2678.0| 5552.7|  2496|  8307|         40.0|    3.0|  40.6| 1460|    274|    358|   506|   322|  1092|     246|     253|    331|    262|  null|14584.80867|   null|44858.90398|90519.05525|1.549668874|140.0|298.2|1015.3|39.155|  18.847|    17960| 39.6291| 27.623| 56.0156|0.134555849|  58.03|      62.27|  3.216732724| 17.54713756|    3.99| 4.91| 4.35| 4.74|5.03|4.92|4.72|4.61|5.34|     0.92|    0.36|    0.75|  1.04|  0.93|   0.73|  0.62|  1.35|    null| 4.3268|360.3604| 2.7998| 0.9532|      33.1|      33.2|   30.8|   30.4|     2.97|  34.2|   29.37|    45.3|    30.0|    21.9|       33.5|       38.5|       23.7|    29.6|         31.0|         29.9| 17.41|         54.611|           20.0|         12.502|         2.22|         2.57|         2.13|    null|286.7|     7362.0| 14063.0|75.4515|   null|\n|  2/1/1960|2392.8| 2253.6|         18.993|269264.9524|18831.78085|24.7836|25.4087|24.1082|34.4232| 24.8905| 39.2302| 9.2816|23.6575|14.5837|33.3297|  23.3195|  21.7886| 37.953|84.6108|41.0|0.012316011|  68949| 65620|   4.8|    13.1|   1431|     1034|     841|      412|     429|270542.9143| 54513| 19605|        690.9|  3053| 15765|   9358|    6407| 34908|11145|  2682.5| 5576.5|  2506|  8326|         39.7|    2.8|  40.3| 1503|    269|    383|   487|   364|  1088|     232|     256|    305|    295|  null|14535.90107|   null|43828.80497|91532.18286|1.570331126|139.9|298.5|1015.0|39.043|  18.213|    17403| 39.7872| 27.696| 56.3646|0.135166907|  55.78|       59.6|  3.412208677| 16.64332894|    3.97| 4.66| 3.96|  4.3|4.66|4.69|4.49|4.56|5.34|     0.69|   -0.01|    0.33|  0.69|  0.72|   0.52|  0.59|  1.37|    null| 4.3376|360.6203| 2.8033| 0.9517|      33.1|      33.2|   30.9|   30.4|     2.97|  34.3|   29.41|    45.5|    30.0|    22.0|       33.4|       38.5|       23.8|    29.6|         31.1|         30.0|17.427|           54.7|         20.001|         12.522|         2.23|         2.59|         2.14|   100.0|287.0|     7396.0| 14144.0|73.3363|   null|\n|  3/1/1960|2397.2| 2255.5|         19.262| 261773.335|18811.03986|24.5611|25.3218|24.0806|34.4628| 24.3985| 39.5909| 9.3016|23.2692|14.1232|33.3443|  23.0329|  22.6171|38.3447|83.2421|39.0|0.010466989|  68399| 64673|   5.4|    13.0|   1666|     1120|     959|      519|     440|308941.4671| 54458| 19373|        689.2|  2881| 15707|   9301|    6406| 35085|11134|  2686.9| 5572.5|  2513|  8525|         39.5|    2.7|  40.0| 1109|    146|    206|   428|   329|   955|     166|     189|    273|    327|  null|14375.07033|   null|42848.30333|92282.28695|1.601324503|139.8|299.4|1018.0|39.019|  18.032|    17391|  40.018|27.7862| 56.8629|0.136035646|  55.02|      58.71|  3.525990549| 16.29469522|    3.84| 4.49| 3.31| 3.61|4.02|4.31|4.25|4.49|5.25|     0.65|   -0.53|   -0.23|  0.18|  0.47|   0.41|  0.65|  1.41|    null| 4.3369|360.6203| 2.8059|  0.951|      33.4|      33.6|   30.9|   30.7|     2.97|  34.2|   29.41|    45.5|    29.9|    22.1|       33.5|       38.3|       23.9|    29.6|         31.1|         30.0|17.437|          54.54|         20.037|         12.529|         2.24|         2.69|         2.14|    null|287.8|     7456.0| 14239.0|71.5296|   null|\n|  4/1/1960|2405.6| 2263.6|          19.56|264364.1095|19304.67539|24.3664|25.3798|24.1082|34.7008| 24.3695| 39.9967| 9.2019|22.7257|13.6166|33.0522|  22.8505|  22.6447|39.5199|82.2593|38.0|0.010497238|  69579| 65959|   5.2|    12.6|   1735|     1002|     896|      465|     431|299583.6316| 54812| 19446|        692.9|  3004| 15654|   9242|    6412| 35366|11296|  2695.0| 5669.4|  2520|  8534|         39.8|    2.3|  40.0| 1289|    218|    288|   466|   317|  1016|     189|     244|    286|    297|  null|14220.82331|   null|42054.74558|92292.02856|1.590993378|139.6|300.1|1015.9|39.042|  18.124|    17518| 40.5152|27.8319| 57.7114| 0.13708171|  55.73|      59.46|   3.48704468| 16.35770331|    3.92| 4.16| 3.23| 3.55|4.04|4.29|4.28|4.45| 5.2|     0.24|   -0.69|   -0.37|  0.12|  0.37|   0.36|  0.53|  1.28|    null| 4.3388|360.2305| 2.8095|  0.963|      33.4|      33.6|   30.8|   30.8|     2.97|  34.1|   29.54|    45.6|    29.9|    22.2|       33.6|       38.3|       23.9|    29.6|         31.2|         30.1|17.501|         54.606|         20.163|         12.555|         2.24|         2.61|         2.14|    null|288.3|     7582.0| 14413.0|71.4718|   null|\n|  5/1/1960|2411.7| 2269.4|         19.166|  256173.77|19016.37565|24.3386|25.5246|24.2743| 34.899|  24.601|  40.132| 9.2318|22.5186|13.4324|33.1039|  22.7203|  22.3685|38.4318|81.4711|38.0| 0.01064724|  69626| 66057|   5.1|    11.9|   1718|     1074|     797|      408|     389| 317341.353| 54473| 19374|        685.8|  3021| 15575|   9169|    6406| 35099|11173|  2691.9| 5595.4|  2523|  8432|         39.7|    2.6|  40.1| 1271|    215|    298|   458|   300|  1052|     224|     240|    302|    286|  null|14392.94042|   null|41591.20103|92847.30043|1.621986755|139.6|300.9|1017.6|39.103|  18.215|    17719| 40.8926|27.8235|  57.951| 0.13716213|  55.22|      58.84|  3.525298805| 16.17449529|    3.85| 4.25| 3.29| 3.58|4.21|4.49|4.35|4.46|5.28|      0.4|   -0.56|   -0.27|  0.36|  0.64|    0.5|  0.61|  1.43|    null| 4.3245|360.4903|  2.806| 0.9781|      33.4|      33.6|   30.8|   30.8|     2.97|  34.1|   29.57|    45.7|    29.8|    22.2|       33.6|       38.1|       24.0|    29.6|         31.2|         30.1|17.519|           54.6|         20.154|          12.59|         2.24|         2.64|         2.14|    93.3|289.1|     7673.0| 14559.0|71.6858|   null|\n|  6/1/1960|2412.8| 2268.4|         19.161|258359.4559|18990.44941|24.0326|25.2349|23.9975|34.6611| 24.3406| 39.9066| 9.1121|22.1562|13.0025|33.1329|  22.4597|  22.5066|38.2577|80.2236|37.0|0.009824748|  69934| 66168|   5.4|    11.9|   1738|     1182|     854|      458|     396|321767.9813| 54347| 19240|        682.0|  2999| 15466|   9078|    6388| 35107|11163|  2687.0| 5593.3|  2528|  8432|         39.5|    2.4|  39.9| 1247|    208|    323|   408|   308|   958|     176|     213|    285|    284|  null|14668.51589|   null|41404.25714|93051.87427|1.632317881|139.6|302.3|1020.9| 39.11|  18.307|    17873| 41.3564|27.7933| 58.3871|0.138063608|  57.26|      61.06|  3.405518687| 16.73863965|    3.32| 3.81| 2.46| 2.74|3.36|4.12|4.15|4.45|5.26|     0.49|   -0.86|   -0.58|  0.04|   0.8|   0.83|  1.13|  1.94|    null|  4.315|361.2717| 2.8027| 0.9824|      33.4|      33.6|   30.9|   30.4|     2.97|  34.2|   29.61|    45.7|    29.8|    22.2|       33.6|       38.1|       24.0|    29.6|         31.3|         30.1|17.527|         54.451|          20.15|         12.614|         2.24|         2.64|         2.14|    null|290.2|     7805.0| 14816.0|71.1864|   null|\n|  7/1/1960|2415.3| 2270.9|           19.2|256557.4384|18799.63231|23.9492|  25.09|23.8591|34.3438| 23.4144| 39.9968| 9.0025|22.1821|13.0793|32.8582|  22.4076|  22.7275|39.2152|79.7275|36.0|0.009384776|  69745| 65909|   5.5|    12.6|   1709|     1184|     921|      521|     400|334038.6192| 54304| 19170|        663.1|  3002| 15413|   9035|    6378| 35134|11158|  2688.7| 5595.8|  2536|  8442|         39.6|    2.4|  39.9| 1197|    198|    306|   394|   299|   999|     219|     224|    268|    288|  null|14169.09412|   null|40797.64328|93422.05551|1.642649007|140.2|304.1|1029.1|  39.2|  18.513|    18135| 41.3958|27.8032| 58.7467|0.138520868|  55.84|      59.25|  3.492120344| 16.40282021|    3.23| 3.39|  2.3| 2.71| 3.2|3.79| 3.9|4.41|5.22|     0.16|   -0.93|   -0.52| -0.03|  0.56|   0.67|  1.18|  1.99|    null| 4.3135|359.3245| 2.8084| 0.9786|      33.5|      33.7|   30.8|   30.4|     2.97|  34.2|   29.55|    45.8|    29.8|    22.3|       33.5|       38.0|       24.1|    29.7|         31.3|         30.1|17.559|         54.456|         20.182|         12.646|         2.24|         2.66|         2.14|    null|291.7|     7853.0| 15028.0| 73.002|   null|\nnonly showing top 20 rows\n\n\nres11: Long = 700\n"},"dateCreated":"2017-12-06T15:02:39+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:243"},{"text":"val file = files.take(1).map(x=>x._1)\nval filedata = files.take(1).map(x=>x._2)\nval filename = file(0)\nval data = filedata(0)\n\n val name = filename.split(\"/FRED-MD/\")(1).split(\".csv\")(0) + \"-01\" \n \n\n val result = data.lines.toList.zipWithIndex.map{ case (line, index) => if (index == 0) (\"vintage,\" + line).split(\",\") else  (name + \",\" + line ).split(\",\", -1)  }\n //result(0).foreach(println)\n //result.drop(2).map(x => Row.fromSeq(x)).foreach(println)\n\n val datardd1 = sc.parallelize(result) \n val datardd2 = sc.parallelize(result.take(2).drop(1)).map(x => Row.fromSeq(x))  \n \n val schemasize = datardd2.first().size\n  \n val datardd3 = sc.parallelize(result.drop(2)).map(x => Row.fromSeq( x ++ (\",\" * (schemasize - x.size)).split(\",\", -1)  )) //43   \n                                              //.map( case Row(key:Int, value: String) => Row(key:Int, value: String))          \n/*                                              .map{ case Row(key: Int, value: String) => key match {\n                                                       //case 1 => val datepart = value.split(\"/\"); Row(1, Array(datepart(2),datepart(0),datepart(1)).mkString(\"-\"))\n                                                       case _ => Row(key, value)    \n                                                       \n                                                   }\n                                                }\n*/     \n val headrdd = datardd1.first().map(x => x.replace(\" \", \"_\").replace(\"&\", \"and\").replace(\":\",\"\"))\n \n datardd2.first().size\n //datardd3.take(1)\n datardd3.first().size\n\n println(\"...............\")\n \n println(datardd3.count)\n datardd3.first()\n //datardd2.first().foreach(println)\n\n// val df_schema0 =\n//  StructType(\n//    headrdd.map(fieldName => StructField(fieldName, StringType, true)))\n\n val df_schema =\n  StructType(\n    headrdd.map(fieldName => fieldName match {\n        case \"vintage\" => StructField(fieldName, StringType, true)\n        case _         => StructField(fieldName, StringType, true)\n    }                 \n    )\n  )\n\n        \n    \n\n val tabledf2 = sqlContext.createDataFrame(datardd3, df_schema)\n\n //tabledf2.show\n tabledf2.select(\"sasdate\").take(10)\n \n\n\n\n","dateUpdated":"2017-12-06T15:02:39+0000","config":{"editorSetting":{"language":"scala"},"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1512572559601_-2082761617","id":"20171122-214535_1236164769","dateCreated":"2017-12-06T15:02:39+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:244"},{"text":"sqlContext.setBigQueryProjectId(projectId)\nsqlContext.setBigQueryGcsBucket(bucket)\nval sampletable = sqlContext.bigQueryTable(\"mortgage-data-warehouse:GNMAI.GNMAI_H\")   //(\"bigquery-public-data:samples.shakespeare\")\nsampletable.take(3)\nsampletable.saveAsBigQueryTable(\"mortgage-data-warehouse:GNMAI.gnmatest\")  //save doesnt' work\n","dateUpdated":"2017-12-06T15:02:39+0000","config":{"editorSetting":{"language":"scala"},"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":147.5,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1512572559601_-2082761617","id":"20171127-015042_758610098","dateCreated":"2017-12-06T15:02:39+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:245"},{"text":"import spark.implicits._\r\nimport org.apache.spark.sql.types._\r\nimport org.apache.spark.sql._\r\nimport org.apache.spark.sql.Row;\r\nimport com.spotify.spark.bigquery._\r\n\r\n\r\nval csvData = \"\"\"|userid,organizationid,userfirstname,usermiddlename,userlastname,usertitle,createdate\r\n|1,1,user1,m1,l1,mr,1999-08-01\r\n|2,2,user2,m2,l2,mr,1999-09-01\r\n|3,3,user3,m3,l3,mr,1999-02-01\r\n|\"\"\".stripMargin\r\nval rdd = sc.parallelize(csvData.lines.toList)\r\n\r\nval rddheader = rdd.first()\r\n\r\nval rdd2 = rdd.filter(x => !x.contains(\"id\"))\r\n\r\n//val rdd3 = rdd.mapPartitionsWithIndex { (idx, iter) => if (idx == 1) iter.drop(1) else iter }\r\n\r\nval row_rdd = rdd2.map(x => \"tt\" +: x.split(',')).map(x => Row.fromSeq(x))\r\n\r\nval df_schema =\r\n  StructType(\r\n    (\"ttype\" +: rdd.first.split(',')).map(fieldName => fieldName match {\r\n      case \"createdate\" => StructField(fieldName, StringType, true)\r\n      case     _  => StructField(fieldName, StringType, true)\r\n      \r\n    }\r\n  )\r\n )     \r\n\r\n\r\n println(\"-----------------check ----------------------\")\r\n  import com.google.api.services.bigquery.model.TableSchema\r\n  import com.google.api.services.bigquery.model.TableFieldSchema\r\n\r\n   val bq_schema = rdd.first.split(',').toList  //.map{fieldName => new TableFieldSchema().setName(fieldName).setType(\"String\").setMode(\"NULLABLE\")} //\r\n\r\n\r\n\r\n\r\nvar df = sqlContext.createDataFrame(row_rdd, df_schema)\r\ndf.printSchema\r\ndf.take(3)\r\n\r\ndf.columns\r\n\r\n\r\ndf.selectExpr(\"(usertitle, userlastname) as complex\", \"*\").show\r\n\r\n\r\nval dft = df.withColumn(\"userid\", df.col(\"userid\").cast(FloatType)) //.withColumn(\"createdate\", df.col(\"createdate\").cast(\"Date\"))\r\ndft.printSchema\r\n\r\n//dft.saveAsBigQueryTable(\"mortgage-data-warehouse:FREDMD.test1\")\r\n\r\n\r\n\r\ndft.toJSON.show(false)\r\n\r\nval df2 = df.withColumn(\"createdate2\", 'createdate.cast(\"Date\"))   //.select('createdate2 as 'cdate, 'userid)\r\n\r\n\r\n\r\ndf2.describe().show()\r\n\r\nimport org.apache.spark.sql.functions.{initcap}\r\ndf2.select(initcap(col(\"userfirstname\"))).show(2, false)\r\n\r\n\r\nval filt = col(\"createdate2\") > java.sql.Date.valueOf(\"1999-08-01\")\r\n\r\ndf2.where(filt).show\r\n\r\n\r\ndf2.printSchema\r\n\r\n/*\r\nval df3 = df.select(\r\n   df.columns.map {\r\n     case \"createdate\" => df(\"createdate\").cast(DateType).as(\"createdate\")\r\n     case \"usertitle\" => functions.upper(df(\"usertitle\")).as(\"usertitle\")\r\n     case other         => df(other)\r\n   }: _*\r\n)\r\n\r\ndf3.printSchema\r\n\r\ndf3.show\r\n*/\r\n\r\n\r\n\r\n","dateUpdated":"2017-12-06T15:02:39+0000","config":{"editorSetting":{"language":"scala"},"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1512572559601_-2082761617","id":"20171128-023141_921077054","dateCreated":"2017-12-06T15:02:39+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:246"},{"text":" println(\"-----------------check ----------------------\")\n  import com.google.api.services.bigquery.model.TableSchema\n  import com.google.api.services.bigquery.model.TableFieldSchema\n\n  //fieldSchema.add(new TableFieldSchema().setName(\"username\").setType(\"STRING\").setMode(\"NULLABLE\"));\n\n//  val fieldschema = List[TableFieldSchema](3)\n//  val schema = new TableSchema()\n//  schema.setFields(fieldschema)\n    \n   val bq_schema = rdd.first.split(',').toList.map{fieldName => new TableFieldSchema().setName(fieldName).setType(\"String\").setMode(\"NULLABLE\")} //\n","dateUpdated":"2017-12-06T15:02:39+0000","config":{"editorSetting":{"language":"scala"},"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1512572559602_-2081607371","id":"20171202-015353_1077894360","dateCreated":"2017-12-06T15:02:39+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:247"},{"text":"","dateUpdated":"2017-12-06T15:02:39+0000","config":{"editorSetting":{"language":"scala"},"colWidth":12,"editorMode":"ace/mode/scala","results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1512572559602_-2081607371","id":"20171202-015353_293616641","dateCreated":"2017-12-06T15:02:39+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:248"},{"text":"val outputTableId = projectId + \":FHLMC.test_json\"\r\n// Temp output bucket that is deleted upon completion of job.\r\nval outputGcsPath = (\"gs://\" + bucket + \"/hadoop/tmp/bigquery/testoutput\")\r\n\r\n// Output configuration.\r\n// Let BigQueery auto-detect output schema (set to null below).\r\nBigQueryOutputConfiguration.configure(conf,\r\n                                      outputTableId,\r\n                                      null,\r\n                                      outputGcsPath,\r\n                                      BigQueryFileFormat.NEWLINE_DELIMITED_JSON,\r\n                                      classOf[TextOutputFormat[_,_]])\r\n\r\nconf.set(\"mapreduce.job.outputformat.class\",\r\n         classOf[IndirectBigQueryOutputFormat[_,_]].getName)\r\n\r\n// Truncate the table before writing output to allow multiple runs.\r\nconf.set(BigQueryConfiguration.OUTPUT_TABLE_WRITE_DISPOSITION_KEY,\r\n         \"WRITE_TRUNCATE\")\r\n\r\n//val testout = df.select(\"ttype\",\"userid\",\"organizationid\",\"userfirstname\",\"usermiddlename\",\"userlastname\",\"usertitle\",\"createdate\").toJSON.rdd\r\nval testout = df.toJSON.rdd\r\ndf.printSchema\r\ndf.show\r\n\r\n\r\nimport com.google.gson.JsonObject\r\nimport com.google.gson.JsonParser\r\n\r\nval jsonObj = new JsonObject()\r\nval parser = new JsonParser()\r\n\r\n//val json = sc.parallelize(Array((\"1501052587\",4500L)\r\n\r\nval ss = sc.parallelize(Array((\"{\\\"a\\\": \\\"A\\\"}\")))\r\nval pss = parser.parse(\"{\\\"a\\\": \\\"A\\\"}\").getAsJsonObject\r\npss.get(\"a\")\r\n\r\nval jss = ss.toDF.toJSON.rdd\r\n\r\n\r\n//jss.map(pair => (null, new JsonParser().parse(pair).getAsJsonObject)).saveAsNewAPIHadoopDataset(conf)\r\n\r\n//.getAsJsonObject()\r\n\r\n//    ----------------------- Test functionality -------------------------------\r\n//val x = sc.parallelize(Array((\"t_type\":\"tt\",\"userid\":\"1\"), (\"t_type\":\"tt\",\"userid\":\"2\"), (\"t_type\":\"tt\",\"userid\":\"1\")))\r\nval x = sc.parallelize(Array((\"1501052587\",4500L), (\"1501052581\",4500L), (\"1023599344\",13000L)))\r\nval y = sc.parallelize(Array((\"1501052587\",Some(4500L)), (\"1501052581\",Some(4500L)), (\"1023599344\",Some(13000L))))\r\nprintln(x.collect().mkString(\", \"))\r\n\r\nval jx = x.toDF(\"userid\", \"balance\").toJSON.rdd\r\n//val jx = x.toDF().toJSON.rdd\r\n\r\n//jx.getClass\r\n//testout.getClass\r\njx.toDF.show(false)\r\ntestout.toDF.show(false)\r\n\r\n\r\n//jx.map(pair => (null, new JsonParser().parse(pair).getAsJsonObject)).saveAsNewAPIHadoopDataset(conf)\r\n\r\ntestout.map(pair => (null, new JsonParser().parse(pair).getAsJsonObject)).saveAsNewAPIHadoopDataset(conf)\r\n\r\n//val jxx = jx.map(x => println(x.getClass))\r\n//    (x.map(pair => (null, convertToJson(pair)))\r\n//    .saveAsNewAPIHadoopDataset(conf))\r\n\r\n\r\n//x.map(pair => convertToJson(pair)).\r\n\r\n//(null, json).toList\r\n//sc.parallelize((null, json)) //.saveAsNewAPIHadoopDataset(conf)\r\n\r\n//testout.map(x => new JsonParser().parse(x).getAsJsonObject())\r\n\r\n//    testout.map(row => (null, new JsonParser().parse(row).getAsJsonObject()))\r\n//    .saveAsNewAPIHadoopDataset(conf)\r\n\r\n/*\r\ndf.selectExpr(\"(usertitle, organizationid, userfirstname) as mystru\")\r\n  .select(to_json(col(\"mystru\"))).show(false)\r\n*/\r\n\r\n","dateUpdated":"2017-12-06T15:02:39+0000","config":{"editorSetting":{"language":"scala"},"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1512572559602_-2081607371","id":"20171128-212413_501946510","dateCreated":"2017-12-06T15:02:39+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:249"},{"text":"val date1 = java.sql.Date.valueOf(\"2001-03-3\")\nval datepart = \"02/22/2017\".split(\"/\")\nval date2 = java.sql.Date.valueOf(Array(datepart(2),datepart(0),datepart(1)).mkString(\"-\"))\n\nval str = lit(\"2016-20-29\")\n\nval dateDF = spark.range(10)\n  .withColumn(\"today\", current_date())\n  .withColumn(\"now\", current_timestamp())\n\ndateDF.createOrReplaceTempView(\"dateTable\")\ndateDF.show(false)\n\n\ndateDF\n  .withColumn(\"week_ago\", date_sub(col(\"today\"), 7))\n  .select(datediff(col(\"week_ago\"), col(\"today\")))\n  .show(1)\n\ndateDF\n  .select(\n    to_date(lit(\"2016-01-01\")).alias(\"start\"),\n    to_date(lit(\"2017-05-22\")).alias(\"end\"))\n  .select(months_between(col(\"start\"), col(\"end\")))\n  .show(1)\n\n","dateUpdated":"2017-12-06T15:02:39+0000","config":{"editorSetting":{"language":"scala"},"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1512572559602_-2081607371","id":"20171127-015319_2096812207","dateCreated":"2017-12-06T15:02:39+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:250"},{"text":"//fileData.toDF.count()\n//fhlmc46m.count\n\n\n\nfiles.toDF.show\n\n//fileData.repartition(1).toDF.write.csv(\"gs://\" + projectId + \"/FHLMC/tmp/dataproc/\")\n\n//fhlmc46m.repartition(1).write.csv(\"gs://\" + projectId + \"/FHLMC/tmp/dataproc/\")","dateUpdated":"2017-12-06T15:02:39+0000","config":{"editorSetting":{"language":"scala"},"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1512572559602_-2081607371","id":"20171006-143419_914559290","dateCreated":"2017-12-06T15:02:39+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:251"},{"text":"//test.toDF().select(\"Age_Q\").show()\n//.select(\"Age_Q\").take(10).foreach(l => println(l))\nval fhlmc = test.toDF().registerTempTable(\"fhlmc\")\n\nval outputGcsPath = (\"gs://\" + projectId + \"/FHLMC/tmp/dataproc\")\n\n//val test_save = test.toDF().coalesce(1)\n//import org.apache.spark.sql.{SaveMode, SparkSession}\n//test_save.write.mode(SaveMode.Overwrite).csv(outputGcsPath + \"/hdfs/test_save.csv\")\n\n\ntest.select(\"Loan_num_q\").write.csv(\"gs://\" + projectId + \"/FHLMC/tmp/dataproc/test_ds_save.csv\")\n//test.saveAsTextFile(\"gs://\" + projectId + \"/FHLMC/tmp/dataproc\")\n\n\n","dateUpdated":"2017-12-06T15:02:39+0000","config":{"editorSetting":{"language":"scala"},"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1512572559602_-2081607371","id":"20170929-152315_65608423","dateCreated":"2017-12-06T15:02:39+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:252"},{"text":"%sql \nselect age_q, count(1) value\nfrom fhlmc \ngroup by age_q","dateUpdated":"2017-12-06T15:02:39+0000","config":{"editorSetting":{"language":"sql"},"colWidth":6,"editorMode":"ace/mode/sql","results":{"0":{"graph":{"mode":"multiBarChart","height":300,"optionOpen":false,"setting":{"multiBarChart":{"stacked":false}},"commonSetting":{},"keys":[{"name":"age_q","index":0,"aggr":"sum"}],"groups":[],"values":[{"name":"value","index":1,"aggr":"sum"}]},"helium":{}}},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1512572559602_-2081607371","id":"20170927-202907_282031011","dateCreated":"2017-12-06T15:02:39+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:253"},{"text":"%bigquery.sql\r\n#standardSQL\r\nSELECT loan_num_q, count(*) FROM `mortgage-data-warehouse.FHLMC.FHLMC_orig` \r\nwhere loan_num_q is null\r\ngroup by 1\r\n--limit 10","dateUpdated":"2017-12-06T15:02:39+0000","config":{"editorSetting":{"language":"sql","editOnDblClick":false},"colWidth":6,"editorMode":"ace/mode/sql","results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1512572559602_-2081607371","id":"20171005-143255_307464260","dateCreated":"2017-12-06T15:02:39+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:254"},{"text":"loanCounts: org.apache.spark.rdd.RDD[(String, Long)] = ShuffledRDD[56] at reduceByKey at <console>:71\r\nres99: Array[(String, Long)] = Array((1501052587,4500), (1501052581,4500), (1023599344,13000), (1023595551,12500), (1501052592,4500), (1501052590,4500), (1501052583,4500), (1501052585,4500), (1501052589,4500), (1023595687,12500), (1501052584,4500), (1501052580,4500), (1501052586,4500), (1501052588,4500), (1501052591,4500), (1501052593,4500), (1501052582,4500), (1023598090,13000))\r\n\r\n\r\nloanCounts: org.apache.spark.rdd.RDD[(String, Long)] = MapPartitionsRDD[61] at map at <console>:69\r\nres107: Array[(String, Long)] = Array((1023595687,12500), (1023598090,13000), (1023595551,12500), (1023599344,13000), (1501052590,4500), (1501052581,4500), (1501052583,4500), (1501052582,4500), (1501052592,4500), (1501052586,4500), (1501052593,4500), (1501052585,4500), (1501052584,4500), (1501052580,4500), (1501052591,4500), (1501052587,4500), (1501052588,4500), (1501052589,4500))\r\n","dateUpdated":"2017-12-06T15:02:39+0000","config":{"tableHide":false,"editorSetting":{"language":"scala"},"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1512572559602_-2081607371","id":"20171006-191023_1063959915","dateCreated":"2017-12-06T15:02:39+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:255"},{"text":"val dfList = ('a' to 'd').map(col => (1 to 5).zip(col.toInt to col.toInt + 4).toDF(\"ID\", col.toString)).toList\ndfList","dateUpdated":"2017-12-06T15:02:39+0000","config":{"editorSetting":{"language":"scala"},"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1512572559602_-2081607371","id":"20171007-110851_2024412243","dateCreated":"2017-12-06T15:02:39+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:256"},{"text":"val t = (1 to 5).zip('a'.toInt to 'a'.toInt + 4).toDF(\"ID\", \"a\").toList ","dateUpdated":"2017-12-06T15:02:39+0000","config":{"editorSetting":{"language":"scala"},"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1512572559602_-2081607371","id":"20171007-120544_1946509542","dateCreated":"2017-12-06T15:02:39+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:257"},{"text":"","dateUpdated":"2017-12-06T15:02:39+0000","config":{"editorSetting":{"language":"scala"},"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1512572559602_-2081607371","id":"20171120-200854_948827262","dateCreated":"2017-12-06T15:02:39+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:258"}],"name":"FHLMC_spark","id":"2D355W97R","angularObjects":{"2D1JHZ8GK:shared_process":[],"2CZ3WRQHV:shared_process":[],"2D17YCEYW:shared_process":[],"2CZBMK95P:shared_process":[],"2D3MXNSZK:shared_process":[],"2D2Q37B6S:shared_process":[]},"config":{"looknfeel":"default"},"info":{}}